function Callout(t,e){this.$element=$(e),this.index=t,this.selectors={button:".callout__button"},this.initialize()}function Cart(t,e){this.$element=$(e),this.index=t,this.selectors={cartItems:".cart-items"},this.states={cartItems:{IS_REQUESTING:"cart-items--is-requesting"}},this.initialize()}Callout.prototype=Object.assign({},Callout.prototype,{initialize:function(){this.$button=this.$element.find(this.selectors.button),this.$button.on("click",this._handleButtonClick.bind(this)),this.$element.on("cart:added",this._handleSuccesfulAddToCart.bind(this))},_getProductID:function(){return this.$element.data("product-id")},_getProductProps:function(){const t=this.$element.data("background-color"),e=this.$element.data("highlight-color"),i=this.$element.attr("data-available-selling-plan");return 0!=i?{_bg_color:t,_highlight_color:e,selling_plan:i}:{_bg_color:t,_highlight_color:e}},_createCartEvent:function(){$(document).one("cart.requestComplete",function(){this.$element.trigger("cart:added")}.bind(this))},_addToCart:function(t){if(CartJS){const e=this._getProductProps();console.log("properties",e),CartJS.addItem(t,1,e),this._createCartEvent()}},_handleSuccesfulAddToCart:function(){console.log("Item has been successfully added to the cart.")},_handleButtonClick:function(t){const e=this._getProductID();this._addToCart(e)}}),$(".callout").each((function(t,e){new Callout(t,e)})),Cart.prototype=Object.assign({},Cart.prototype,{initialize:function(){this.$cartItems=this.$element.find(this.selectors.cartItems),$(document).on("cart.requestStarted",this._handleCartRequestStart.bind(this)),$(document).on("cart.requestComplete",this._handleCartRequestComplete.bind(this))},_handleCartRequestStart:function(){this.$cartItems.addClass(this.states.cartItems.IS_REQUESTING)},_handleCartRequestComplete:function(){this.$cartItems.removeClass(this.states.cartItems.IS_REQUESTING)}}),$(".cart__form").each((function(t,e){new Cart(t,e)}));